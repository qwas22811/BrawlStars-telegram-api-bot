from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
import requests

telegram_token = 'Your telegram token should be here'
api_key = 'Your Brawl Stars api token should be here'

headers = {
    "Authorization": f"Bearer {api_key}",
}

def get_player_data(player_tag):
    url = f"https://api.brawlstars.com/v1/players/%23{player_tag}"
    response = requests.get(url, headers=headers)
    return response.json() if response.status_code == 200 else None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üéÆ –í–æ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="enter_profile")],
        [InlineKeyboardButton("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", callback_data="view_info")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç Brawl Stars. –¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è!",
        reply_markup=reply_markup,
    )

async def enter_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–≥ (–±–µ–∑ #):")
    context.user_data["awaiting_tag"] = True

async def save_tag(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("awaiting_tag"):
        player_tag = update.message.text.strip()
        context.user_data["player_tag"] = player_tag
        context.user_data["awaiting_tag"] = False
        
        keyboard = [
            [InlineKeyboardButton("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", callback_data="view_info")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("‚úÖ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", reply_markup=reply_markup)

async def view_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    player_tag = context.user_data.get("player_tag")
    if not player_tag:
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üéÆ –í–æ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="enter_profile")]])
        )
        return

    player_data = get_player_data(player_tag)
    if player_data:
        player_name = player_data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        trophies = player_data.get("trophies", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        clan_name = player_data.get("club", {}).get("name", "–í—ã –Ω–µ –≤ –∫–ª–∞–Ω–µ")
        
        await update.callback_query.message.reply_text(
            f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è:\nüë§ –ò–º—è: {player_name}\nüèÜ –¢—Ä–æ—Ñ–µ–∏: {trophies}\nüè∞ –ö–ª–∞–Ω: {clan_name}"
        )
        
        keyboard = [
            [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="return_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.message.reply_text(
            "‚¨ÖÔ∏è –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=reply_markup
        )
    else:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–≥.",
                                       reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üéÆ –í–æ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="enter_profile")]]))

async def return_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üéÆ –í–æ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="enter_profile")],
        [InlineKeyboardButton("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", callback_data="view_info")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç Brawl Stars.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
    )

if __name__ == "__main__":
    app = ApplicationBuilder().token(telegram_token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(enter_profile, pattern="enter_profile"))
    app.add_handler(CallbackQueryHandler(view_info, pattern="view_info"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, save_tag))
    app.add_handler(CallbackQueryHandler(return_to_menu, pattern="return_to_menu"))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()
